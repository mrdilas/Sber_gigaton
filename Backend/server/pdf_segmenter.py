
import PyPDF2
from pathlib import Path
import hashlib

class PDFSegmenter:
    def __init__(self, project_root="."):
        self.project_root = Path(project_root)
        self.segments_dir = self.project_root / "segments"
        self.segments_dir.mkdir(exist_ok=True)

    def get_file_hash(self, pdf_path):
        """–°–æ–∑–¥–∞–µ—Ç —Ö—ç—à —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        hasher = hashlib.md5()
        with open(pdf_path, 'rb') as f:
            buf = f.read()
            hasher.update(buf)
        return hasher.hexdigest()

    def is_already_processed(self, pdf_path, txt_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"""
        if not txt_path.exists():
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—ç—à –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        expected_hash = self.get_file_hash(pdf_path)
        return expected_hash in txt_path.stem

    def segment_pdf_to_txt(self, pdf_path):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ PDF –≤ TXT"""
        pdf_path = Path(pdf_path)

        if not pdf_path.exists():
            raise FileNotFoundError(f"PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")

        # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è txt —Ñ–∞–π–ª–∞ —Å —Ö—ç—à–µ–º
        file_hash = self.get_file_hash(pdf_path)
        txt_filename = f"{pdf_path.stem}_{file_hash}.txt"
        txt_path = self.segments_dir / txt_filename

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª
        if self.is_already_processed(pdf_path, txt_path):
            print(f"–§–∞–π–ª —É–∂–µ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω: {txt_path}")
            return txt_path

        print(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é PDF: {pdf_path}")

        try:
            with open(pdf_path, 'rb') as pdf_file:
                pdf_reader = PyPDF2.PdfReader(pdf_file)

                segments = []
                total_pages = len(pdf_reader.pages)

                for page_num in range(total_pages):
                    page = pdf_reader.pages[page_num]
                    text = page.extract_text()

                    # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    cleaned_text = self.clean_text(text)
                    if cleaned_text.strip():
                        segment = self.create_segment(cleaned_text, page_num + 1, total_pages)
                        segments.append(segment)

                    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}/{total_pages}", end='\r')

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
                self.save_segments(segments, txt_path)
                print(f"–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {txt_path}")

                return txt_path

        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")

    def clean_text(self, text):
        """–û—á–∏—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        lines = text.split('\n')
        cleaned_lines = []

        for line in lines:
            line = line.strip()
            if line:
                # –£–±–∏—Ä–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã)
                if len(line) > 2:
                    cleaned_lines.append(line)

        return '\n'.join(cleaned_lines)

    def create_segment(self, text, page_num, total_pages):
        """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç"""
        segment = {
            'page': page_num,
            'total_pages': total_pages,
            'content': text,
            'segment_id': f"page_{page_num:03d}",
            'metadata': f"=== –°–¢–†–ê–ù–ò–¶–ê {page_num}/{total_pages} ==="
        }
        return segment

    def save_segments(self, segments, output_path):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        with open(output_path, 'w', encoding='utf-8') as f:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            f.write("=== –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –î–û–ö–£–ú–ï–ù–¢ ===\n")
            f.write(f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {segments[0]['total_pages']}\n")
            f.write("=" * 50 + "\n\n")
            
            for segment in segments:
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                f.write(f"üìÑ –°–¢–†–ê–ù–ò–¶–ê {segment['page']}\n")
                f.write("‚îÄ" * 40 + "\n")
                f.write(segment['content'] + "\n")
                f.write("‚îÄ" * 40 + "\n\n")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–∞–∂–¥—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                if segment['page'] % 5 == 0:
                    f.write("‚ú¶‚ú¶‚ú¶ –†–ê–ó–î–ï–õ ‚ú¶‚ú¶‚ú¶\n\n")

    def list_processed_files(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        txt_files = list(self.segments_dir.glob("*.txt"))
        if not txt_files:
            print("–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ segments")
            return []

        print("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for i, file in enumerate(txt_files, 1):
            print(f"{i}. {file.name}")
        return txt_files


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def process_pdf(pdf_path, project_root="."):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Ñ–∞–π–ª–∞

    Args:
        pdf_path (str): –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        project_root (str): –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞

    Returns:
        Path: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É txt —Ñ–∞–π–ª—É
    """
    segmenter = PDFSegmenter(project_root)
    return segmenter.segment_pdf_to_txt(pdf_path)

