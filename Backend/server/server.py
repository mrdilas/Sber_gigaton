# server.py
from flask import Flask, request, jsonify
from flask_cors import CORS
from neyro import GigaChatManager
from pdf_segmenter import process_pdf  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
import time
import os
import uuid
import PyPDF2  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from supabase import create_client, Client
from werkzeug.utils import secure_filename

app = Flask(__name__)
CORS(app)

app.config['MAX_CONTENT_LENGTH'] = 200 * 1024 * 1024  # 200MB limit

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
UPLOAD_FOLDER = 'uploads'
PROCESSED_FOLDER = 'processed_files'
ALLOWED_EXTENSIONS = {'pdf'}

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(PROCESSED_FOLDER, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat
# –£–∫–∞–∂–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π API-—Ç–æ–∫–µ–Ω
API_TOKEN = 'MDE5OTlhYjktYzA5My03ZjQzLTk1OTMtMzI5NzVmYTA0OWMyOmY0MjFmYzMwLWY3YzQtNGE2MC04NjMzLWE0MTdjOTY3ZDc3OA=='
giga_manager = GigaChatManager(API_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase 
SUPABASE_URL = 'https://bppgahmqwuduiadqmbbr.supabase.co'  
SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJwcGdhaG1xd3VkdWlhZHFtYmJyIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTE5NDc4NywiZXhwIjoyMDc0NzcwNzg3fQ.3ivMQF3kVj4uP94SwEcnWuM0swAawnVCZmn8QbKJqnQ'
supabase = None

def init_supabase():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞"""
    global supabase
    try:
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        print("Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            response = supabase.table('pdf_files').select('id').limit(1).execute()
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")
        return False

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def upload_pdf_to_gigachat(pdf_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–∞ –≤ GigaChat"""
    try:
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º PDF –≤ GigaChat: {pdf_path}")
        giga_manager.upload_file(pdf_path)
        
        files = giga_manager.files
        if files:
            latest_file = files[-1]
            print(f"PDF –∑–∞–≥—Ä—É–∂–µ–Ω –≤ GigaChat —Å ID: {latest_file.id}")
            return latest_file.id
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF –≤ GigaChat: {e}")
        raise e

def process_pdf_for_search(pdf_path):
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞"""
    try:
        print(f"–°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞: {pdf_path}")
        txt_path = process_pdf(pdf_path)
        print(f"–¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {txt_path}")
        return txt_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏: {e}")
        return None

def split_pdf_by_pages(pdf_path, max_pages_per_chunk=50):
    """–†–∞–∑–±–∏–≤–∞–µ–º PDF –Ω–∞ —á–∞—Å—Ç–∏"""
    import PyPDF2
    from pathlib import Path
    
    try:
        pdf_path = Path(pdf_path)
        chunks = []
        
        with open(pdf_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            total_pages = len(pdf_reader.pages)
            
            for start_page in range(0, total_pages, max_pages_per_chunk):
                end_page = min(start_page + max_pages_per_chunk, total_pages)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PDF —Å —á–∞—Å—Ç—å—é —Å—Ç—Ä–∞–Ω–∏—Ü
                pdf_writer = PyPDF2.PdfWriter()
                for page_num in range(start_page, end_page):
                    pdf_writer.add_page(pdf_reader.pages[page_num])
                
                chunk_path = pdf_path.parent / f"{pdf_path.stem}_part_{start_page//max_pages_per_chunk + 1}.pdf"
                with open(chunk_path, 'wb') as chunk_file:
                    pdf_writer.write(chunk_file)
                
                chunks.append(chunk_path)
                print(f"–°–æ–∑–¥–∞–Ω —á–∞–Ω–∫: {chunk_path.name} (—Å—Ç—Ä–∞–Ω–∏—Ü—ã {start_page+1}-{end_page})")
        
        return chunks
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ PDF –Ω–∞ —á–∞–Ω–∫–∏: {e}")
        return []

def upload_pdf_chunks_to_gigachat(pdf_path, max_size_mb=20):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º PDF —á–∞–Ω–∫–∞–º–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π"""
    file_size_mb = os.path.getsize(pdf_path) / (1024 * 1024)
    
    if file_size_mb <= max_size_mb:
        # –§–∞–π–ª –Ω–µ–±–æ–ª—å—à–æ–π - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return upload_pdf_to_gigachat(pdf_path), [pdf_path]
    else:
        # –§–∞–π–ª –±–æ–ª—å—à–æ–π - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        print(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.2f} MB), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏...")
        chunks = split_pdf_by_pages(pdf_path)
        chunk_ids = []
        
        for chunk_path in chunks:
            try:
                chunk_id = upload_pdf_to_gigachat(chunk_path)
                chunk_ids.append(chunk_id)
                print(f"–ß–∞–Ω–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ GigaChat: {chunk_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–∞ {chunk_path}: {e}")
        
        return chunk_ids, chunks

def create_smart_chunks_from_pdf(pdf_path, max_chunk_size=15000):
    """–°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞–Ω–∫–∏ –∏–∑ PDF"""
    try:
        txt_path = process_pdf(pdf_path)
        
        with open(txt_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ chunks (–ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º)
        chunks = []
        current_chunk = ""
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        pages = content.split('üìÑ –°–¢–†–ê–ù–ò–¶–ê')
        for page in pages[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–æ–Ω –ø—É—Å—Ç–æ–π)
            page_content = 'üìÑ –°–¢–†–ê–ù–ò–¶–ê' + page
            
            if len(current_chunk) + len(page_content) > max_chunk_size and current_chunk:
                chunks.append(current_chunk)
                current_chunk = page_content
            else:
                current_chunk += page_content
        
        if current_chunk:
            chunks.append(current_chunk)
        
        print(f"–°–æ–∑–¥–∞–Ω–æ {len(chunks)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤")
        return chunks, txt_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤: {e}")
        return [], None

def ask_with_context(message, context_chunks):
    """–ó–∞–ø—Ä–æ—Å –∫ GigaChat —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ —á–∞–Ω–∫–æ–≤"""
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        relevant_chunks = context_chunks[:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —á–∞–Ω–∫–∞
        
        context = "\n\n".join(relevant_chunks)
        
        prompt = f"""
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏—è.
        –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
        
        –ö–û–ù–¢–ï–ö–°–¢ –î–û–ö–£–ú–ï–ù–¢–ê:
        {context}
        
        –í–û–ü–†–û–°: {message}
        
        –û—Ç–≤–µ—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
        """
        
        result = giga_manager.giga.chat({
            "messages": [{"role": "assistant", "content": prompt}],
            "temperature": 0.87,
            "max-tokens": 1000,

        })
        
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ ask_with_context: {e}")
        raise e

def upload_pdf_chunks_to_gigachat(pdf_path, max_size_mb=20):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º PDF —á–∞–Ω–∫–∞–º–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"""
    try:
        file_size_mb = os.path.getsize(pdf_path) / (1024 * 1024)
        
        if file_size_mb <= max_size_mb:
            # –§–∞–π–ª –Ω–µ–±–æ–ª—å—à–æ–π - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            file_id = upload_pdf_to_gigachat(pdf_path)
            return [file_id], [pdf_path]
        else:
            # –§–∞–π–ª –±–æ–ª—å—à–æ–π - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            print(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.2f} MB), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏...")
            chunks = split_pdf_by_pages(pdf_path)
            chunk_ids = []
            
            for chunk_path in chunks:
                try:
                    chunk_id = upload_pdf_to_gigachat(chunk_path)
                    chunk_ids.append(chunk_id)
                    print(f"–ß–∞–Ω–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ GigaChat: {chunk_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–∞ {chunk_path}: {e}")
            
            return chunk_ids, chunks
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ upload_pdf_chunks_to_gigachat: {e}")
        return [], []




# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.route('/chat', methods=['POST'])
def chat_with_ai():
    try:
        data = request.get_json()

        if not data or 'message' not in data:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400

        user_message = data['message']
        selected_file = data.get('selected_file_id')

        print(f"–ü–æ–ª—É—á–µ–Ω selected_file: {selected_file}, —Ç–∏–ø: {type(selected_file)}")

        # –ò–ó–í–õ–ï–ö–ê–ï–ú ID –§–ê–ô–õ–ê
        selected_file_id = None
        
        if selected_file:
            if isinstance(selected_file, dict):
                selected_file_id = selected_file.get('id')
                print(f"–ò–∑–≤–ª–µ—á–µ–Ω ID –∏–∑ –æ–±—ä–µ–∫—Ç–∞: {selected_file_id}")
            elif isinstance(selected_file, (str, int)):
                selected_file_id = str(selected_file)
                print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å—Ç—ã–π ID: {selected_file_id}")
            else:
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {type(selected_file)}")
                selected_file_id = None

        print(f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π file_id: {selected_file_id}")

        if not user_message.strip():
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ –±–∞–∑—ã
        file_info = None
        if selected_file_id:
            try:
                file_response = supabase.table('pdf_files').select('*').eq('id', selected_file_id).execute()
                if file_response.data:
                    file_info = file_response.data[0]
                    print(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≤ –±–∞–∑–µ: {file_info['name']}")
                else:
                    print(f"–§–∞–π–ª —Å ID {selected_file_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑–µ: {e}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        start_time = time.time()
        
        if file_info and file_info.get('upload_method') == 'direct' and file_info.get('gigachat_file_id'):
            # –ü—Ä—è–º–æ–π –º–µ—Ç–æ–¥ —Å attachments
            gigachat_file_id = file_info['gigachat_file_id']
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ —Å —Ñ–∞–π–ª–æ–º: {gigachat_file_id}")
            
            result = giga_manager.giga.chat({
                "messages": [{
                    "role": "user",
                    "content": f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {user_message}",
                    "attachments": [gigachat_file_id],
                }],
                "temperature": 0.1
            })
            
        elif file_info and file_info.get('txt_path'):
            # –ú–µ—Ç–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤
            txt_path = file_info['txt_path']
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞–Ω–∫–∏ –∏–∑: {txt_path}")
            
            try:
                chunks, _ = create_smart_chunks_from_pdf(file_info['storage_path'])
                result = ask_with_context(user_message, chunks)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤: {e}")
                # Fallback - –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
                result = giga_manager.giga.chat({
                    "messages": [{"role": "user", "content": user_message}],
                    "temperature": 0.1
                })
        else:
            # –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∞–π–ª–∞
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∞–π–ª–∞")
            result = giga_manager.giga.chat({
                "messages": [{"role": "user", "content": user_message}],
                "temperature": 0.1
            })

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
        if hasattr(result, 'choices') and len(result.choices) > 0:
            ai_response = result.choices[0].message.content
        elif hasattr(result, 'message') and hasattr(result.message, 'content'):
            ai_response = result.message.content
        else:
            ai_response = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"

        processing_time = time.time() - start_time

        print(f"–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫")

        return jsonify({
            'response': ai_response,
            'status': 'success',
            'processing_time': f"{processing_time:.2f} —Å–µ–∫",
            'used_file_id': selected_file_id
        })

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return jsonify({
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/pdf/upload', methods=['POST'])
def upload_pdf_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
            
        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
            
        if not allowed_file(file.filename):
            return jsonify({'error': '–¢–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'}), 400

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PDF
        original_filename = secure_filename(file.filename)
        pdf_save_path = os.path.join(UPLOAD_FOLDER, f"{uuid.uuid4()}_{original_filename}")
        file.save(pdf_save_path)
        
        file_size = os.path.getsize(pdf_save_path)
        file_size_mb = file_size / (1024 * 1024)
        
        print(f"PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {pdf_save_path}, —Ä–∞–∑–º–µ—Ä: {file_size_mb:.2f} MB")

        gigachat_file_ids = []
        upload_method = "text_chunks"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞–Ω–∫–∏
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –µ—Å–ª–∏ —Ñ–∞–π–ª –º–∞–ª–µ–Ω—å–∫–∏–π
        if file_size_mb <= 20:  # –î–æ 20MB
            try:
                file_id = upload_pdf_to_gigachat(pdf_save_path)
                gigachat_file_ids = [file_id]
                upload_method = "direct"
                print(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –≤ GigaChat: {file_id}")
            except Exception as e:
                print(f"–ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                upload_method = "text_chunks"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ (–≤—Å–µ–≥–¥–∞)
        txt_path = None
        try:
            chunks, txt_path = create_smart_chunks_from_pdf(pdf_save_path)
            print(f"–¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {txt_path}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Supabase
        file_data = {
            'name': original_filename,
            'storage_path': str(pdf_save_path),
            'file_url': f"/api/files/{os.path.basename(pdf_save_path)}",
            'file_size': file_size,
            'gigachat_file_id': gigachat_file_ids[0] if gigachat_file_ids else None,
            'txt_path': str(txt_path) if txt_path else None,
            'upload_method': upload_method
        }
        
        db_response = supabase.table('pdf_files').insert(file_data).execute()
        
        if not db_response.data:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É")

        file_data = db_response.data[0]

        return jsonify({
            'message': f'PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ({upload_method} –º–µ—Ç–æ–¥)',
            'file': file_data,
            'file_size_mb': f"{file_size_mb:.2f}",
            'upload_method': upload_method,
            'gigachat_file_id': gigachat_file_ids[0] if gigachat_file_ids else None
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        if 'pdf_save_path' in locals() and os.path.exists(pdf_save_path):
            os.remove(pdf_save_path)
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}'}), 500

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@app.route('/api/pdf/files', methods=['GET'])
def get_pdf_files_list():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Supabase"""
    try:
        response = supabase.table('pdf_files').select('*').order('uploaded_at').execute()
        
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(response.data)}")
        for file in response.data:
            print(f"–§–∞–π–ª: {file['name']}, GigaChat ID: {file.get('gigachat_file_id', 'N/A')}")
        
        return jsonify({
            'files': response.data,
            'total_count': len(response.data)
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/pdf/delete/<file_id>', methods=['DELETE'])
def delete_pdf_file(file_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_response = supabase.table('pdf_files').select('*').eq('id', file_id).execute()
        
        if not file_response.data:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
            
        file_data = file_response.data[0]
        gigachat_file_id = file_data.get('gigachat_file_id')
        storage_path = file_data.get('storage_path')
        txt_path = file_data.get('txt_path')

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ GigaChat
        if gigachat_file_id:
            try:
                giga_manager.delete_file_by_id(gigachat_file_id)
                print(f"–§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ GigaChat: {gigachat_file_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ GigaChat: {e}")

        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        if storage_path and os.path.exists(storage_path):
            os.remove(storage_path)
        if txt_path and os.path.exists(txt_path):
            os.remove(txt_path)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        supabase.table('pdf_files').delete().eq('id', file_id).execute()

        return jsonify({'message': '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'})
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        files_count = len(giga_manager.files)
        
        supabase_status = "OK"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
        if supabase:
            try:
                test_response = supabase.table('pdf_files').select('id').limit(1).execute()
            except Exception as e:
                supabase_status = f"ERROR: {str(e)}"
        else:
            supabase_status = "NOT INITIALIZED"
        
        return jsonify({
            'status': 'OK',
            'message': '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
            'gigachat_files_available': files_count,
            'supabase_status': supabase_status
        })
    except Exception as e:
        return jsonify({
            'status': 'ERROR',
            'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'
        }), 500

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost:5000")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat
    try:
        files = giga_manager.files
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat —É—Å–ø–µ—à–Ω–æ. –î–æ—Å—Ç—É–ø–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        for file in files:
            print(f"  - {file.fullname} (ID: {file.id})")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat: {e}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
    supabase_initialized = init_supabase()
    if supabase_initialized:
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ")
    else:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase")

    app.run(host='0.0.0.0', port=5000, debug=True)